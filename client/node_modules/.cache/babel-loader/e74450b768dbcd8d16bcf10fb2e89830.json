{"ast":null,"code":"import _regeneratorRuntime from \"/Users/javieralejandroamorosigomez/Desktop/Javier/Proyectos/react/react-tutorial/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";\nimport _objectSpread from \"/Users/javieralejandroamorosigomez/Desktop/Javier/Proyectos/react/react-tutorial/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\nimport firebase from \"firebase/app\";\nimport \"firebase/firestore\";\nimport \"firebase/auth\";\nvar config = {\n  apiKey: \"AIzaSyA5cFMfRj0MYKuYMjOVd8KOKBNB_o-cSfA\",\n  authDomain: \"crwn-db-66998.firebaseapp.com\",\n  databaseURL: \"https://crwn-db-66998.firebaseio.com\",\n  projectId: \"crwn-db-66998\",\n  storageBucket: \"crwn-db-66998.appspot.com\",\n  messagingSenderId: \"317210629966\",\n  appId: \"1:317210629966:web:a6192da12373d3f7ffb01f\",\n  measurementId: \"G-BPEJHFL92X\"\n};\nexport var createUserProfileDocument = function createUserProfileDocument(userAuth, additionalData) {\n  var userRef, snapShot, displayName, email, createdAt;\n  return _regeneratorRuntime.async(function createUserProfileDocument$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          if (userAuth) {\n            _context.next = 2;\n            break;\n          }\n\n          return _context.abrupt(\"return\");\n\n        case 2:\n          userRef = firestore.doc(\"users/\".concat(userAuth.uid));\n          _context.next = 5;\n          return _regeneratorRuntime.awrap(userRef.get());\n\n        case 5:\n          snapShot = _context.sent;\n\n          if (snapShot.exists) {\n            _context.next = 17;\n            break;\n          }\n\n          displayName = userAuth.displayName, email = userAuth.email;\n          createdAt = new Date();\n          _context.prev = 9;\n          _context.next = 12;\n          return _regeneratorRuntime.awrap(userRef.set(_objectSpread({\n            displayName: displayName,\n            email: email,\n            createdAt: createdAt\n          }, additionalData)));\n\n        case 12:\n          _context.next = 17;\n          break;\n\n        case 14:\n          _context.prev = 14;\n          _context.t0 = _context[\"catch\"](9);\n          console.log(\"Error creating user...\", _context.t0.message);\n\n        case 17:\n          return _context.abrupt(\"return\", userRef);\n\n        case 18:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, null, null, [[9, 14]]);\n}; //Insercion en la base de datos\n\n/*\nexport const addCollectionAndDocuments = async (\n  collectionKey,\n  objectsToAdd\n) => {\n  const collectionRef = firestore.collection(collectionKey);\n  //Asegura que las inserciones en la base de datos sean completas\n  const batch = firestore.batch();\n  objectsToAdd.forEach(obj => {\n    const docRef = collectionRef.doc();\n    batch.set(docRef, obj);\n  });\n  return await batch.commit();\n};\n*/\n\nexport var convertCollectionsSnapshotToMap = function convertCollectionsSnapshotToMap(collections) {\n  var TransformedCollection = collections.docs.map(function (doc) {\n    var _doc$data = doc.data(),\n        title = _doc$data.title,\n        items = _doc$data.items;\n\n    return {\n      routeName: encodeURI(title.toLowerCase()),\n      id: doc.id,\n      title: title,\n      items: items\n    };\n  });\n  return TransformedCollection;\n};\nfirebase.initializeApp(config);\nexport var auth = firebase.auth(); //Sign in with google...\n\nexport var firestore = firebase.firestore();\nvar provider = new firebase.auth.GoogleAuthProvider();\nprovider.setCustomParameters({\n  prompt: \"select_account\"\n});\nexport var signInWithGoogle = function signInWithGoogle() {\n  return auth.signInWithPopup(provider);\n};\nexport default firebase;","map":{"version":3,"sources":["/Users/javieralejandroamorosigomez/Desktop/Javier/Proyectos/react/react-tutorial/src/firebase/firebase.utils.js"],"names":["firebase","config","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","createUserProfileDocument","userAuth","additionalData","userRef","firestore","doc","uid","get","snapShot","exists","displayName","email","createdAt","Date","set","console","log","message","convertCollectionsSnapshotToMap","collections","TransformedCollection","docs","map","data","title","items","routeName","encodeURI","toLowerCase","id","initializeApp","auth","provider","GoogleAuthProvider","setCustomParameters","prompt","signInWithGoogle","signInWithPopup"],"mappings":";;AAAA,OAAOA,QAAP,MAAqB,cAArB;AACA,OAAO,oBAAP;AACA,OAAO,eAAP;AACA,IAAMC,MAAM,GAAG;AACbC,EAAAA,MAAM,EAAE,yCADK;AAEbC,EAAAA,UAAU,EAAE,+BAFC;AAGbC,EAAAA,WAAW,EAAE,sCAHA;AAIbC,EAAAA,SAAS,EAAE,eAJE;AAKbC,EAAAA,aAAa,EAAE,2BALF;AAMbC,EAAAA,iBAAiB,EAAE,cANN;AAObC,EAAAA,KAAK,EAAE,2CAPM;AAQbC,EAAAA,aAAa,EAAE;AARF,CAAf;AAWA,OAAO,IAAMC,yBAAyB,GAAG,SAA5BA,yBAA4B,CAAOC,QAAP,EAAiBC,cAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAElCD,QAFkC;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAIjCE,UAAAA,OAJiC,GAIvBC,SAAS,CAACC,GAAV,iBAAuBJ,QAAQ,CAACK,GAAhC,EAJuB;AAAA;AAAA,2CAMhBH,OAAO,CAACI,GAAR,EANgB;;AAAA;AAMjCC,UAAAA,QANiC;;AAAA,cAQlCA,QAAQ,CAACC,MARyB;AAAA;AAAA;AAAA;;AAS7BC,UAAAA,WAT6B,GASNT,QATM,CAS7BS,WAT6B,EAShBC,KATgB,GASNV,QATM,CAShBU,KATgB;AAU/BC,UAAAA,SAV+B,GAUnB,IAAIC,IAAJ,EAVmB;AAAA;AAAA;AAAA,2CAa7BV,OAAO,CAACW,GAAR;AACJJ,YAAAA,WAAW,EAAXA,WADI;AAEJC,YAAAA,KAAK,EAALA,KAFI;AAGJC,YAAAA,SAAS,EAATA;AAHI,aAIDV,cAJC,EAb6B;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAoBnCa,UAAAA,OAAO,CAACC,GAAR,CAAY,wBAAZ,EAAsC,YAAMC,OAA5C;;AApBmC;AAAA,2CAyBhCd,OAzBgC;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,CAAlC,C,CA4BP;;AACA;;;;;;;;;;;;;;;;AAgBA,OAAO,IAAMe,+BAA+B,GAAE,SAAjCA,+BAAiC,CAACC,WAAD,EAAe;AAE3D,MAAMC,qBAAqB,GAAGD,WAAW,CAACE,IAAZ,CAAiBC,GAAjB,CAC5B,UAAAjB,GAAG,EAAI;AAAA,oBACiBA,GAAG,CAACkB,IAAJ,EADjB;AAAA,QACEC,KADF,aACEA,KADF;AAAA,QACQC,KADR,aACQA,KADR;;AAEL,WAAO;AACLC,MAAAA,SAAS,EAAGC,SAAS,CAACH,KAAK,CAACI,WAAN,EAAD,CADhB;AAELC,MAAAA,EAAE,EAAGxB,GAAG,CAACwB,EAFJ;AAGLL,MAAAA,KAAK,EAALA,KAHK;AAILC,MAAAA,KAAK,EAALA;AAJK,KAAP;AAMD,GAT2B,CAA9B;AAYA,SAAOL,qBAAP;AAGD,CAjBM;AAmBP9B,QAAQ,CAACwC,aAAT,CAAuBvC,MAAvB;AACA,OAAO,IAAMwC,IAAI,GAAGzC,QAAQ,CAACyC,IAAT,EAAb,C,CACP;;AACA,OAAO,IAAM3B,SAAS,GAAGd,QAAQ,CAACc,SAAT,EAAlB;AACP,IAAM4B,QAAQ,GAAG,IAAI1C,QAAQ,CAACyC,IAAT,CAAcE,kBAAlB,EAAjB;AACAD,QAAQ,CAACE,mBAAT,CAA6B;AAAEC,EAAAA,MAAM,EAAE;AAAV,CAA7B;AACA,OAAO,IAAMC,gBAAgB,GAAG,SAAnBA,gBAAmB;AAAA,SAAML,IAAI,CAACM,eAAL,CAAqBL,QAArB,CAAN;AAAA,CAAzB;AAEP,eAAe1C,QAAf","sourcesContent":["import firebase from \"firebase/app\";\nimport \"firebase/firestore\";\nimport \"firebase/auth\";\nconst config = {\n  apiKey: \"AIzaSyA5cFMfRj0MYKuYMjOVd8KOKBNB_o-cSfA\",\n  authDomain: \"crwn-db-66998.firebaseapp.com\",\n  databaseURL: \"https://crwn-db-66998.firebaseio.com\",\n  projectId: \"crwn-db-66998\",\n  storageBucket: \"crwn-db-66998.appspot.com\",\n  messagingSenderId: \"317210629966\",\n  appId: \"1:317210629966:web:a6192da12373d3f7ffb01f\",\n  measurementId: \"G-BPEJHFL92X\"\n};\n\nexport const createUserProfileDocument = async (userAuth, additionalData) => {\n  //Si no hay ningun usuario autentificado no hago nada\n  if (!userAuth) return;\n\n  const userRef = firestore.doc(`users/${userAuth.uid}`);\n\n  const snapShot = await userRef.get();\n\n  if (!snapShot.exists) {\n    const { displayName, email } = userAuth;\n    const createdAt = new Date();\n\n    try {\n      await userRef.set({\n        displayName,\n        email,\n        createdAt,\n        ...additionalData\n      });\n    } catch (error) {\n      console.log(\"Error creating user...\", error.message);\n    }\n  }\n\n  //si esta autentificado tengo que preguntar si esta registrado en la base de datos...\n  return userRef;\n};\n\n//Insercion en la base de datos\n/*\nexport const addCollectionAndDocuments = async (\n  collectionKey,\n  objectsToAdd\n) => {\n  const collectionRef = firestore.collection(collectionKey);\n  //Asegura que las inserciones en la base de datos sean completas\n  const batch = firestore.batch();\n  objectsToAdd.forEach(obj => {\n    const docRef = collectionRef.doc();\n    batch.set(docRef, obj);\n  });\n  return await batch.commit();\n};\n*/\n\nexport const convertCollectionsSnapshotToMap= (collections)=>{\n  \n  const TransformedCollection = collections.docs.map(\n    doc => {\n      const {title,items} = doc.data();\n      return {\n        routeName : encodeURI(title.toLowerCase()),\n        id : doc.id,\n        title,\n        items\n      }\n    }\n  )\n\n  return TransformedCollection;\n\n\n}\n\nfirebase.initializeApp(config);\nexport const auth = firebase.auth();\n//Sign in with google...\nexport const firestore = firebase.firestore();\nconst provider = new firebase.auth.GoogleAuthProvider();\nprovider.setCustomParameters({ prompt: \"select_account\" });\nexport const signInWithGoogle = () => auth.signInWithPopup(provider);\n\nexport default firebase;\n"]},"metadata":{},"sourceType":"module"}